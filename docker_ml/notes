# build docker instance
docker-machine -D create --driver amazonec2 \
--amazonec2-instance-type p2.xlarge \
--amazonec2-region us-east-1 \
--amazonec2-zone c \
--amazonec2-retries 50 \
--amazonec2-vpc-id $AWS_VPC_ID \
--amazonec2-access-key $AWS_ACCESS_KEY_ID \
--amazonec2-secret-key $AWS_SECRET_ACCESS_KEY \
awsgpu01

# the create usually fails and docker doesn't load correctly
docker-machine stop awsgpu01
docker-machine start awsgpu01
docker-machine regenerate-certs awsgpu01

# check on instance
docker-machine ip awsgpu01
docker-machine inspect awsgpu01

# SSH into the machine
docker-machine ssh awsgpu01
nvidia-smi
ls /dev | grep nvidia

# if the above works, then set env
docker-machine env awsgpu01
eval `docker-machine env awsgpu01`

# build image
docker build -t kcavagnolo/dsci-ml:latest -f Dockerfile.gpu .

# push to repo
docker login
docker push kcavagnolo/dsci-ml:latest

# setup notebook
docker run \
 -it --rm \
 -p 8888:8888 \
 -v /notebooks \
 -v /home/kcavagnolo/ml_fun:/notebooks \
 kcavagnolo/dsci-ml \
 sh -c "jupyter notebook --ip=0.0.0.0 --no-browser --notebook-dir='/notebooks'"

# clean-up
docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)

# close and kill instance
docker rmi $(docker images -a -q)
docker-machine stop awsgpu01
docker-machine rm -f awsgpu01

# local
docker-machine rm -f os-docker-test; clear
docker-machine -D create --driver openstack \
--openstack-flavor-name m2.xlarge \
--openstack-image-name 'Ubuntu14.04-LTS-trusty-64bit-Server' \
--openstack-floatingip-pool public \
--openstack-sec-groups default \
--openstack-domain-name default \
--openstack-keypair-name cavagnok \
--openstack-private-key-file '/home/kcavagnolo/.ssh/openstack.pem' \
os-docker-test
